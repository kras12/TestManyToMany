// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestManyToMany;

#nullable disable

namespace TestManyToMany.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookEntityCategoryEntity", b =>
                {
                    b.Property<int>("BooksBookEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesCategoryEntityId")
                        .HasColumnType("int");

                    b.HasKey("BooksBookEntityId", "CategoriesCategoryEntityId");

                    b.HasIndex("CategoriesCategoryEntityId");

                    b.ToTable("BookEntityCategoryEntity", (string)null);
                });

            modelBuilder.Entity("TestManyToMany.BookEntity", b =>
                {
                    b.Property<int>("BookEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookEntityId"));

                    b.Property<int?>("PersonEntityPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookEntityId");

                    b.HasIndex("PersonEntityPersonId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("TestManyToMany.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryEntityId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryEntityId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TestManyToMany.PersonEntity", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("BookEntityCategoryEntity", b =>
                {
                    b.HasOne("TestManyToMany.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("BooksBookEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestManyToMany.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestManyToMany.BookEntity", b =>
                {
                    b.HasOne("TestManyToMany.PersonEntity", null)
                        .WithMany("Books")
                        .HasForeignKey("PersonEntityPersonId");
                });

            modelBuilder.Entity("TestManyToMany.PersonEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
